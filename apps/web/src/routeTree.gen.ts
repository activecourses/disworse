/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotFoundImport } from './routes/not-found'
import { Route as GraphqlTestImport } from './routes/graphql-test'
import { Route as AppImport } from './routes/app'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const NotFoundRoute = NotFoundImport.update({
  path: '/not-found',
  getParentRoute: () => rootRoute,
} as any)

const GraphqlTestRoute = GraphqlTestImport.update({
  path: '/graphql-test',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/graphql-test': {
      id: '/graphql-test'
      path: '/graphql-test'
      fullPath: '/graphql-test'
      preLoaderRoute: typeof GraphqlTestImport
      parentRoute: typeof rootRoute
    }
    '/not-found': {
      id: '/not-found'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof NotFoundImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRoute
  '/graphql-test': typeof GraphqlTestRoute
  '/not-found': typeof NotFoundRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRoute
  '/graphql-test': typeof GraphqlTestRoute
  '/not-found': typeof NotFoundRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRoute
  '/graphql-test': typeof GraphqlTestRoute
  '/not-found': typeof NotFoundRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/app' | '/graphql-test' | '/not-found'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app' | '/graphql-test' | '/not-found'
  id: '__root__' | '/' | '/app' | '/graphql-test' | '/not-found'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRoute
  GraphqlTestRoute: typeof GraphqlTestRoute
  NotFoundRoute: typeof NotFoundRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRoute,
  GraphqlTestRoute: GraphqlTestRoute,
  NotFoundRoute: NotFoundRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/graphql-test",
        "/not-found"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app.tsx"
    },
    "/graphql-test": {
      "filePath": "graphql-test.tsx"
    },
    "/not-found": {
      "filePath": "not-found.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
