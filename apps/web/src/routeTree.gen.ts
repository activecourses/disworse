/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotFoundImport } from './routes/not-found'

// Create Virtual Routes

const GraphqlTestLazyImport = createFileRoute('/graphql-test')()
const AppLazyImport = createFileRoute('/app')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const GraphqlTestLazyRoute = GraphqlTestLazyImport.update({
  path: '/graphql-test',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/graphql-test.lazy').then((d) => d.Route))

const AppLazyRoute = AppLazyImport.update({
  path: '/app',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/app.lazy').then((d) => d.Route))

const NotFoundRoute = NotFoundImport.update({
  path: '/not-found',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/not-found': {
      id: '/not-found'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof NotFoundImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppLazyImport
      parentRoute: typeof rootRoute
    }
    '/graphql-test': {
      id: '/graphql-test'
      path: '/graphql-test'
      fullPath: '/graphql-test'
      preLoaderRoute: typeof GraphqlTestLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/not-found': typeof NotFoundRoute
  '/app': typeof AppLazyRoute
  '/graphql-test': typeof GraphqlTestLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/not-found': typeof NotFoundRoute
  '/app': typeof AppLazyRoute
  '/graphql-test': typeof GraphqlTestLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/not-found': typeof NotFoundRoute
  '/app': typeof AppLazyRoute
  '/graphql-test': typeof GraphqlTestLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/not-found' | '/app' | '/graphql-test'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/not-found' | '/app' | '/graphql-test'
  id: '__root__' | '/' | '/not-found' | '/app' | '/graphql-test'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  NotFoundRoute: typeof NotFoundRoute
  AppLazyRoute: typeof AppLazyRoute
  GraphqlTestLazyRoute: typeof GraphqlTestLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  NotFoundRoute: NotFoundRoute,
  AppLazyRoute: AppLazyRoute,
  GraphqlTestLazyRoute: GraphqlTestLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/not-found",
        "/app",
        "/graphql-test"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/not-found": {
      "filePath": "not-found.tsx"
    },
    "/app": {
      "filePath": "app.lazy.tsx"
    },
    "/graphql-test": {
      "filePath": "graphql-test.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
